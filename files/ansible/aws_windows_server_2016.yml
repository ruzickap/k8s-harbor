# kics-scan ignore
- name: Provision Stack
  hosts: localhost
  connection: local

  vars:
    domain: mylabs.dev
    # Values for CloudFormation template
    system_security_settings_tmp_file: c:\\secedit-export.cfg
    windows_machines_ansible_user: ansible
    #checkov:skip=CKV_SECRET_6:Base64 High Entropy String
    windows_machines_ansible_pass: ansible_secret_password
    aws_region: eu-central-1
    aws_cf_eksctl_stack_name: "eksctl-{{ lookup('env','USER') }}-k8s-harbor-cluster"
    aws_cf_stack_name: "{{ aws_cf_eksctl_stack_name }}-windows-server-2016"
    aws_cf_keyname: "{{ lookup('env','USER') }}"
    aws_cf_tags:
      Application: Harbor
      Consumer: "{{ lookup('env','USER') }}"
      Environment: Test

  tasks:
    - name: Get summary information about a cloudformation stack
      cloudformation_facts:
        stack_name: "{{ aws_cf_eksctl_stack_name }}"

    - name: Create/update stack
      cloudformation:
        region: "{{ aws_region }}"
        stack_name: "{{ aws_cf_stack_name }}"
        state: present
        disable_rollback: true
        template_body: "{{ lookup('template', 'templates/aws_cf_stack-windows_server_2016.yml.j2') }}"
        template_parameters:
          KeyName: "{{ aws_cf_keyname }}"
        tags: "{{ aws_cf_tags }}"
      register: cloudformation_result

    - name: Get details about instance
      ec2_instance_facts:
        instance_ids:
          - "{{ cloudformation_result.stack_outputs.InstanceId }}"
      register: ec2_instance_facts_result

    - name: Wait for WinRM to come up
      wait_for: host={{ item.public_ip_address }} port=5986
      loop: "{{ ec2_instance_facts_result.instances }}"
      loop_control:
        label: "{{ item.public_ip_address }} - {{ item.instance_id }} - {{ item.tags.Hostname }}"

    - name: Add AWS Windows AD hosts to group winservers
      add_host:
        name: "{{ item.tags.Hostname }}"
        ansible_ssh_host: "{{ item.public_ip_address }}"
        ansible_port: 5986
        ansible_user: "{{ windows_machines_ansible_user }}"
        ansible_password: "{{ windows_machines_ansible_pass }}"
        ansible_winrm_server_cert_validation: ignore
        ansible_connection: "winrm"
        groups: winservers
        site_name: "{{ aws_cf_stack_name }}"
      changed_when: false
      loop: "{{ ec2_instance_facts_result.instances }}"
      loop_control:
        label: "{{ item.instance_id }} - {{ item.public_ip_address }} - {{ item.tags.Hostname }}"

- name: Common tasks for windows server machines
  hosts: winservers
  any_errors_fatal: true

  vars:
    domain: mylabs.dev
    #checkov:skip=CKV_SECRET_6:Base64 High Entropy String
    master_password: really_long_secret_windows_password
    netbios_name: "{{ domain.split('.')[0] | upper }}"
    number_of_test_groups: 3
    test_user_password: admin

  tasks:
    - name: Enable ICMP
      raw: Import-Module NetSecurity; Set-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-In)" -enabled True
      changed_when: False

    - name: Disable Windows Updates 1/2
      win_regedit:
        key: "{{ item }}"
      loop:
        - 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate'
        - 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU'

    - name: Disable Windows Updates 2/2
      win_regedit:
        key: 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU'
        value: "NoAutoUpdate"
        data: "1"
        datatype: dword

    - name: Start NTP service (w32time)
      win_service:
        name: w32time
        state: started

    - name: Configure NTP
      raw: w32tm /config /manualpeerlist:"0.rhel.pool.ntp.org" /reliable:yes /update
      changed_when: False

    - name: Enable Remote Desktop
      raw: set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      changed_when: False

    - name: Allow connections from computers running any version of Remote Desktop (less secure)
      win_regedit:
        key: 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
        value: UserAuthentication
        data: 0
        datatype: dword

    - name: Allow RDP traffic
      raw: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      changed_when: False

    - name: Disable password complexity
      win_security_policy:
        section: System Access
        key: PasswordComplexity
        value: 0

    - name: Change Administrator password
      win_user:
        name: Administrator
        password: "{{ master_password }}"

    - name: Create groups
      win_group:
        name: "{{ 'adgroup%02x' | format(item) }}"
        description: "{{ 'AD User Group  %02x' | format(item) }}"
      loop: "{{ range(1, number_of_test_groups + 1, 1)|list }}"

    - name: Add users
      win_user:
        name: "{{ 'aduser%02x' | format(item) }}"
        description: "{{ 'User %02x - Group %02x' | format(item, (item / 2) | round(0,'ceil') | int) }}"
        password: "{{ test_user_password }}"
        groups:
          ["{{ 'adgroup%02x' | format((item / 2) | round(0,'ceil') | int) }}"]
      changed_when: False
      loop: "{{ range(1, number_of_test_groups * 2 + 1, 1)|list }}"
      loop_control:
        label: "{{ item }} - {{ 'aduser%02x' | format(item) }} - {{ 'adgroup%02x' | format((item / 2) | round(0,'ceil') | int) }}"

    - name: Change computer name
      win_hostname:
        name: "{{ inventory_hostname.split('.')[0] }}"
      register: win_hostname_result

    - name: Reboot
      win_reboot:
      when: win_hostname_result.reboot_required

    ########################
    # Install AD
    ########################

    - name: Install AD Services feature
      win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        include_sub_features: yes

    - name: Create new forest
      win_domain:
        dns_domain_name: "{{ domain }}"
        safe_mode_password: "{{ master_password }}"
      register: win_domain_result

    - name: Reboot after AD was configured
      win_reboot:
      when: win_domain_result.reboot_required

    - name: Wait 5 minutes after reboot
      pause:
        minutes: 5
      when: win_domain_result.reboot_required

    - name: Gather facts again including AD details
      setup:

    - name: Add email to users
      win_domain_user:
        name: "{{ 'aduser%02x' | format(item) }}"
        email: "{{ 'aduser%02x' | format(item) }}@{{ domain }}"
      loop: "{{ range(1, number_of_test_groups * 2 + 1, 1)|list }}"
      loop_control:
        label: "{{ item }} - {{ 'aduser%02x' | format(item) }} - {{ 'adgroup%02x' | format((item / 2) | round(0,'ceil') | int) }}"

    - name: Windows credentials
      debug: msg="xfreerdp '/u:Administrato'r '/p:{{ master_password }}' /size:1440x810 -wallpaper /cert-ignore /dynamic-resolution /v:{{ hostvars[item].inventory_hostname }}"
      loop: "{{ groups['winservers'] }}"
