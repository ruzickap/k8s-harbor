(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{303:function(e,a,s){e.exports=s.p+"assets/img/kubed.e88b1fb6.svg"},342:function(e,a,s){"use strict";s.r(a);var t=s(8),r=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-cert-manager-kubed-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-cert-manager-kubed-installation"}},[e._v("#")]),e._v(" Nginx + cert-manager + kubed installation")]),e._v(" "),a("p",[e._v("Before we move on with other tasks it is necessary to install Nginx Ingress.\nIt's also handy to install cert-manager for managing SSL certificates.")]),e._v(" "),a("h2",{attrs:{id:"install-cert-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-cert-manager"}},[e._v("#")]),e._v(" Install cert-manager")]),e._v(" "),a("p",[e._v("cert-manager architecture:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/jetstack/cert-manager/4f30ed75e88e5d0defeb950501b5cac6da7fa7fe/docs/images/high-level-overview.png",alt:"cert-manager high level overview",title:"cert-manager high level overview"}})]),e._v(" "),a("p",[e._v("Install the CRDs resources separately:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl apply "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" https://raw.githubusercontent.com/jetstack/cert-manager/release-0.10/deploy/manifests/00-crds.yaml\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("customresourcedefinition.apiextensions.k8s.io/certificates.certmanager.k8s.io created\ncustomresourcedefinition.apiextensions.k8s.io/challenges.certmanager.k8s.io created\ncustomresourcedefinition.apiextensions.k8s.io/clusterissuers.certmanager.k8s.io created\ncustomresourcedefinition.apiextensions.k8s.io/issuers.certmanager.k8s.io created\ncustomresourcedefinition.apiextensions.k8s.io/orders.certmanager.k8s.io created\n")])])]),a("p",[e._v("Create the namespace for cert-manager and label it to disable resource\nvalidation:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl create namespace cert-manager\nkubectl label namespace cert-manager certmanager.k8s.io/disable-validation"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("namespace/cert-manager created\nnamespace/cert-manager labeled\n")])])]),a("p",[e._v("Install the cert-manager Helm chart:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("helm repo "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" jetstack https://charts.jetstack.io\nhelm "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" cert-manager "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--namespace")]),e._v(" cert-manager "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--wait")]),e._v(" jetstack/cert-manager "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v(" v0.10.0\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\"jetstack\" has been added to your repositories\nNAME:   cert-manager\nLAST DEPLOYED: Fri Jul 19 11:47:58 2019\nNAMESPACE: cert-manager\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/ClusterRole\nNAME               AGE\ncert-manager-edit  10s\ncert-manager-view  10s\n\n==> v1/Pod(related)\nNAME                                      READY  STATUS   RESTARTS  AGE\ncert-manager-578fc6ff6-qjvrr              1/1    Running  0         10s\ncert-manager-cainjector-5975fd64c5-82c8x  1/1    Running  0         10s\n\n==> v1/ServiceAccount\nNAME                     SECRETS  AGE\ncert-manager             1        10s\ncert-manager-cainjector  1        10s\n\n==> v1beta1/ClusterRole\nNAME                     AGE\ncert-manager             10s\ncert-manager-cainjector  10s\n\n==> v1beta1/ClusterRoleBinding\nNAME                     AGE\ncert-manager             10s\ncert-manager-cainjector  10s\n\n==> v1beta1/Deployment\nNAME                     READY  UP-TO-DATE  AVAILABLE  AGE\ncert-manager             1/1    1           1          10s\ncert-manager-cainjector  1/1    1           1          10s\n\n\nNOTES:\ncert-manager has been deployed successfully!\n\nIn order to begin issuing certificates, you will need to set up a ClusterIssuer\nor Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).\n\nMore information on the different types of issuers and how to configure them\ncan be found in our documentation:\n\nhttps://docs.cert-manager.io/en/latest/reference/issuers.html\n\nFor information on how to configure cert-manager to automatically provision\nCertificates for Ingress resources, take a look at the `ingress-shim`\ndocumentation:\n\nhttps://docs.cert-manager.io/en/latest/reference/ingress-shim.html\n")])])]),a("h3",{attrs:{id:"create-clusterissuer-for-let-s-encrypt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-clusterissuer-for-let-s-encrypt"}},[e._v("#")]),e._v(" Create ClusterIssuer for Let's Encrypt")]),e._v(" "),a("p",[e._v("Create "),a("code",[e._v("ClusterIssuer")]),e._v(" for Route53 used by cert-manager. It will allow Let's\nEncrypt to generate certificate. Route53 (DNS) method of requesting certificate\nfrom Let's Encrypt must be used to create wildcard certificate "),a("code",[e._v("*.mylabs.dev")]),e._v("\n(details "),a("a",{attrs:{href:"https://community.letsencrypt.org/t/wildcard-certificates-via-http-01/51223",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(").")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://b3n.org/wp-content/uploads/2016/09/acme_letsencrypt_dns-01-challenge.png",alt:"ACME DNS Challenge",title:"ACME DNS Challenge"}})]),e._v(" "),a("p",[e._v("("),a("a",{attrs:{href:"https://b3n.org/intranet-ssl-certificates-using-lets-encrypt-dns-01/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://b3n.org/intranet-ssl-certificates-using-lets-encrypt-dns-01/"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("EKS_CERT_MANAGER_ROUTE53_AWS_SECRET_ACCESS_KEY_BASE64")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$EKS_CERT_MANAGER_ROUTE53_AWS_SECRET_ACCESS_KEY")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" base64"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nenvsubst "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" files/cert-manager-letsencrypt-aws-route53-clusterissuer.yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" -\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" files/cert-manager-letsencrypt-aws-route53-clusterissuer.yaml\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("secret/aws-route53-secret-access-key-secret created\nclusterissuer.certmanager.k8s.io/selfsigning-issuer created\nclusterissuer.certmanager.k8s.io/letsencrypt-staging-dns created\nclusterissuer.certmanager.k8s.io/letsencrypt-production-dns created\napiVersion: v1\nkind: Secret\nmetadata:\n  name: aws-route53-secret-access-key-secret\n  namespace: cert-manager\ndata:\n  secret-access-key: $EKS_CERT_MANAGER_ROUTE53_AWS_SECRET_ACCESS_KEY_BASE64\n---\napiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigning-issuer\nspec:\n  selfSigned: {}\n---\napiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging-dns\n  namespace: cert-manager\nspec:\n  acme:\n    # The ACME server URL\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    # Email address used for ACME registration\n    email: petr.ruzicka@gmail.com\n    # Name of a secret used to store the ACME account private key\n    privateKeySecretRef:\n      name: letsencrypt-staging-dns\n    dns01:\n      # Here we define a list of DNS-01 providers that can solve DNS challenges\n      providers:\n      - name: aws-route53\n        route53:\n          accessKeyID: ${EKS_CERT_MANAGER_ROUTE53_AWS_ACCESS_KEY_ID}\n          region: eu-central-1\n          secretAccessKeySecretRef:\n            name: aws-route53-secret-access-key-secret\n            key: secret-access-key\n---\napiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-production-dns\n  namespace: cert-manager\nspec:\n  acme:\n    # The ACME server URL\n    server: https://acme-v02.api.letsencrypt.org/directory\n    # Email address used for ACME registration\n    email: petr.ruzicka@gmail.com\n    # Name of a secret used to store the ACME account private key\n    privateKeySecretRef:\n      name: letsencrypt-production-dns\n    dns01:\n      # Here we define a list of DNS-01 providers that can solve DNS challenges\n      providers:\n      - name: aws-route53\n        route53:\n          accessKeyID: ${EKS_CERT_MANAGER_ROUTE53_AWS_ACCESS_KEY_ID}\n          region: eu-central-1\n          secretAccessKeySecretRef:\n            name: aws-route53-secret-access-key-secret\n            key: secret-access-key\n")])])]),a("h2",{attrs:{id:"generate-tls-certificate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generate-tls-certificate"}},[e._v("#")]),e._v(" Generate TLS certificate")]),e._v(" "),a("p",[e._v("Create certificate using cert-manager:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("envsubst "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" files/cert-manager-letsencrypt-aws-route53-certificate.yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" -\nenvsubst "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" files/cert-manager-letsencrypt-aws-route53-certificate.yaml\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('certificate.certmanager.k8s.io/ingress-cert-production created\napiVersion: certmanager.k8s.io/v1alpha1\nkind: Certificate\nmetadata:\n  name: ingress-cert-production\n  namespace: cert-manager\nspec:\n  secretName: ingress-cert-production\n  issuerRef:\n    kind: ClusterIssuer\n    name: letsencrypt-production-dns\n  commonName: "*.mylabs.dev"\n  dnsNames:\n  - "*.mylabs.dev"\n  acme:\n    config:\n    - dns01:\n        provider: aws-route53\n      domains:\n      - "*.mylabs.dev"\n')])])]),a("p",[e._v("("),a("a",{attrs:{href:"https://www.openshift.com/blog/self-serviced-end-to-end-encryption-approaches-for-applications-deployed-in-openshift",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.openshift.com/blog/self-serviced-end-to-end-encryption-approaches-for-applications-deployed-in-openshift"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("h2",{attrs:{id:"install-kubed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-kubed"}},[e._v("#")]),e._v(" Install kubed")]),e._v(" "),a("p",[e._v("It's necessary to copy the wildcard certificate across all \"future\" namespaces\nand that's the reason why "),a("a",{attrs:{href:"https://github.com/appscode/kubed",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubed"),a("OutboundLink")],1),e._v(" needs to be\ninstalled (for now).\n"),a("a",{attrs:{href:"https://github.com/appscode/kubed",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubed"),a("OutboundLink")],1),e._v(" can "),a("a",{attrs:{href:"https://appscode.com/products/kubed/",target:"_blank",rel:"noopener noreferrer"}},[e._v("synchronize ConfigMaps/Secrets"),a("OutboundLink")],1),e._v("\nacross Kubernetes namespaces/clusters.")]),e._v(" "),a("p",[e._v("Kubed - synchronize secret diagram:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(303),alt:"Kubed - synchronize secret",title:"Kubed - synchronize secret"}})]),e._v(" "),a("p",[e._v("Add kubed helm repository:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("helm repo "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" appscode https://charts.appscode.com/stable/\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"appscode" has been added to your repositories\n')])])]),a("p",[e._v("Install kubed:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("helm "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" appscode/kubed "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" kubed "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.11")]),e._v(".0 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--namespace")]),e._v(" kube-system "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--wait")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--set")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("config.clusterName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("my_k8s_cluster "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--set")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("apiserver.enabled")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("false\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('NAME:   kubed\nLAST DEPLOYED: Fri Jul 19 11:48:10 2019\nNAMESPACE: kube-system\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/ClusterRole\nNAME         AGE\nkubed-kubed  4s\n\n==> v1/ClusterRoleBinding\nNAME                                  AGE\nkubed-kubed                           4s\nkubed-kubed-apiserver-auth-delegator  4s\n\n==> v1/Pod(related)\nNAME                          READY  STATUS             RESTARTS  AGE\nkubed-kubed-75789b6cc6-6zrst  0/1    ContainerCreating  0         4s\n\n==> v1/RoleBinding\nNAME                                                          AGE\nkubed-kubed-apiserver-extension-server-authentication-reader  4s\n\n==> v1/Secret\nNAME                        TYPE    DATA  AGE\nkubed-kubed                 Opaque  1     4s\nkubed-kubed-apiserver-cert  Opaque  2     4s\n\n==> v1/Service\nNAME         TYPE       CLUSTER-IP      EXTERNAL-IP  PORT(S)  AGE\nkubed-kubed  ClusterIP  10.100.193.123  &lt;none>       443/TCP  4s\n\n==> v1/ServiceAccount\nNAME         SECRETS  AGE\nkubed-kubed  1        4s\n\n==> v1beta1/Deployment\nNAME         READY  UP-TO-DATE  AVAILABLE  AGE\nkubed-kubed  0/1    1           0          4s\n\n\nNOTES:\nTo verify that Kubed has started, run:\n\n  kubectl --namespace=kube-system get deployments -l "release=kubed, app=kubed"\n')])])]),a("p",[e._v("Annotate (mark) the cert-manager secret to be copied to other namespaces\nif necessary:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl annotate secret ingress-cert-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LETSENCRYPT_ENVIRONMENT}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" cert-manager kubed.appscode.com/sync"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"app=kubed"')]),e._v("\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("secret/ingress-cert-production annotated\n")])])]),a("h2",{attrs:{id:"install-nginx-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-nginx-ingress"}},[e._v("#")]),e._v(" Install nginx-ingress")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://camo.githubusercontent.com/b2184aaf45a035d28011cf0eb4de2d2e70a2b5c43cc2b5645889bc156251f23e/68747470733a2f2f7869616f7275692d63632e6f73732d636e2d68616e677a686f752e616c6979756e63732e636f6d2f696d616765732f3230323330312f3230323330313031303032313439372e706e67",alt:"Nginx Ingress controller",title:"Nginx Ingress controller"}})]),e._v(" "),a("p",[e._v("("),a("a",{attrs:{href:"https://www.nginx.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.nginx.com/blog/"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("p",[e._v("Install nginx-ingress which will also create a new loadbalancer:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("helm "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" stable/nginx-ingress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--wait")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" nginx-ingress "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--namespace")]),e._v(" nginx-ingress-system "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.24")]),e._v(".3 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--set")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("rbac.create")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--set")]),e._v(" controller.extraArgs.default-ssl-certificate"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("cert-manager/ingress-cert-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LETSENCRYPT_ENVIRONMENT}")]),e._v("\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NAME:   nginx-ingress\nLAST DEPLOYED: Fri Jul 19 11:48:17 2019\nNAMESPACE: nginx-ingress-system\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/ConfigMap\nNAME                      DATA  AGE\nnginx-ingress-controller  1     8s\n\n==> v1/Pod(related)\nNAME                                            READY  STATUS             RESTARTS  AGE\nnginx-ingress-controller-7b59c7c7bc-nhmq8       0/1    ContainerCreating  0         8s\nnginx-ingress-default-backend-6d489448cb-d9brb  1/1    Running            0         8s\n\n==> v1/Service\nNAME                           TYPE          CLUSTER-IP     EXTERNAL-IP       PORT(S)                     AGE\nnginx-ingress-controller       LoadBalancer  10.100.37.102  a55fd2fadaa0a...  80:30958/TCP,443:31932/TCP  8s\nnginx-ingress-default-backend  ClusterIP     10.100.15.87   &lt;none>            80/TCP                      8s\n\n==> v1/ServiceAccount\nNAME           SECRETS  AGE\nnginx-ingress  1        8s\n\n==> v1beta1/ClusterRole\nNAME           AGE\nnginx-ingress  8s\n\n==> v1beta1/ClusterRoleBinding\nNAME           AGE\nnginx-ingress  8s\n\n==> v1beta1/Deployment\nNAME                           READY  UP-TO-DATE  AVAILABLE  AGE\nnginx-ingress-controller       0/1    1           0          8s\nnginx-ingress-default-backend  1/1    1           1          8s\n\n==> v1beta1/Role\nNAME           AGE\nnginx-ingress  8s\n\n==> v1beta1/RoleBinding\nNAME           AGE\nnginx-ingress  8s\n\n\nNOTES:\nThe nginx-ingress controller has been installed.\nIt may take a few minutes for the LoadBalancer IP to be available.\nYou can watch the status by running 'kubectl --namespace nginx-ingress-system get services -o wide -w nginx-ingress-controller'\n\nAn example Ingress that makes use of the controller:\n\n  apiVersion: extensions/v1beta1\n  kind: Ingress\n  metadata:\n    annotations:\n      kubernetes.io/ingress.class: nginx\n    name: example\n    namespace: foo\n  spec:\n    rules:\n      - host: www.example.com\n        http:\n          paths:\n            - backend:\n                serviceName: exampleService\n                servicePort: 80\n              path: /\n    # This section is only required if TLS is to be enabled for the Ingress\n    tls:\n        - hosts:\n            - www.example.com\n          secretName: example-tls\n\nIf TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:\n\n  apiVersion: v1\n  kind: Secret\n  metadata:\n    name: example-tls\n    namespace: foo\n  data:\n    tls.crt: &lt;base64 encoded cert>\n    tls.key: &lt;base64 encoded key>\n  type: kubernetes.io/tls\n")])])]),a("h2",{attrs:{id:"create-dns-records"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-dns-records"}},[e._v("#")]),e._v(" Create DNS records")]),e._v(" "),a("p",[e._v("nginx-ingress created the loadbalancer service. In case of AWS it is\nClassic Elastic Loadbalancer:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl get "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" nginx-ingress-system\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NAME                            TYPE           CLUSTER-IP      EXTERNAL-IP                                                                  PORT(S)                      AGE\nnginx-ingress-controller        LoadBalancer   10.100.37.102   a55fd2fadaa0a11e9bcf2026dca96845-1478956562.eu-central-1.elb.amazonaws.com   80:30958/TCP,443:31932/TCP   8s\nnginx-ingress-default-backend   ClusterIP      10.100.15.87    &lt;none>                                                                       80/TCP                       8s\n")])])]),a("p",[e._v("Create DNS record "),a("code",[e._v("mylabs.dev")]),e._v(" for the loadbalancer created by nginx-ingress:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LOADBALANCER_HOSTNAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get svc nginx-ingress-controller "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" nginx-ingress-system "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{.status.loadBalancer.ingress[0].hostname}"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CANONICAL_HOSTED_ZONE_NAME_ID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("aws elb describe-load-balancers "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--query")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"LoadBalancerDescriptions[?DNSName==\\'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("$LOADBALANCER_HOSTNAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v('].CanonicalHostedZoneNameID"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--output")]),e._v(" text"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("HOSTED_ZONE_ID")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("aws route53 list-hosted-zones "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--query")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HostedZones[?Name==\\'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("MY_DOMAIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v('].Id"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--output")]),e._v(" text"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n\nenvsubst "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" files/aws_route53-dns_change.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" aws route53 change-resource-record-sets --hosted-zone-id "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${HOSTED_ZONE_ID}")]),e._v(" --change-batch"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("file:///dev/stdin "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" jq\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"ChangeInfo"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"Id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/change/C2YV79SSX0CS95"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"Status"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"PENDING"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"SubmittedAt"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2019-07-19T09:48:29.092Z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"Comment"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"A new record set for the zone."')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Wait for completion of certificate create process:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("OUTPUT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${OUTPUT}")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"True"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${COUNT}")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-lt")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$((")]),e._v("COUNT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("))")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("OUTPUT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get certificate ingress-cert-$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("LETSENCRYPT_ENVIRONMENT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" cert-manager "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{.status.conditions[0].status}"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${COUNT}")]),e._v(' "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/aws-samples/eks-workshop/65b766c494a5b4f5420b2912d8373c4957163541/static/images/crystal.svg?sanitize=true",alt:"Architecture",title:"Architecture"}})]),e._v(" "),a("p",[e._v("You should see the following output form cert-manager when looking at\ncertificates:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl describe certificates "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" cert-manager ingress-cert-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LETSENCRYPT_ENVIRONMENT}")]),e._v("\n")])])]),a("p",[e._v("Output")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Name:         ingress-cert-production\nNamespace:    cert-manager\nLabels:       &lt;none>\nAnnotations:  kubectl.kubernetes.io/last-applied-configuration:\n                {"apiVersion":"certmanager.k8s.io/v1alpha1","kind":"Certificate","metadata":{"annotations":{},"name":"ingress-cert-production","namespace"...\nAPI Version:  certmanager.k8s.io/v1alpha1\nKind:         Certificate\nMetadata:\n  Creation Timestamp:  2019-07-19T09:48:10Z\n  Generation:          4\n  Resource Version:    2919\n  Self Link:           /apis/certmanager.k8s.io/v1alpha1/namespaces/cert-manager/certificates/ingress-cert-production\n  UID:                 5131721b-aa0a-11e9-bcf2-026dca968456\nSpec:\n  Acme:\n    Config:\n      Dns 01:\n        Provider:  aws-route53\n      Domains:\n        *.mylabs.dev\n  Common Name:  *.mylabs.dev\n  Dns Names:\n    *.mylabs.dev\n  Issuer Ref:\n    Kind:       ClusterIssuer\n    Name:       letsencrypt-production-dns\n  Secret Name:  ingress-cert-production\nStatus:\n  Conditions:\n    Last Transition Time:  2019-07-19T09:49:54Z\n    Message:               Certificate is up to date and has not expired\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n  Not After:               2019-10-17T08:49:53Z\nEvents:\n  Type     Reason              Age                  From          Message\n  ----     ------              ----                 ----          -------\n  Warning  IssuerNotReady      105s (x2 over 105s)  cert-manager  Issuer letsencrypt-production-dns not ready\n  Normal   Generated           105s                 cert-manager  Generated new private key\n  Normal   GenerateSelfSigned  105s                 cert-manager  Generated temporary self signed certificate\n  Normal   OrderCreated        105s                 cert-manager  Created Order resource "ingress-cert-production-20059064"\n  Normal   OrderComplete       1s                   cert-manager  Order "ingress-cert-production-20059064" completed successfully\n  Normal   CertIssued          1s                   cert-manager  Certificate issued successfully\n')])])]),a("p",[e._v('The Kubernetes "secret" in '),a("code",[e._v("cert-manager")]),e._v(" namespace should contain the\ncertificates:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl describe secret "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" cert-manager ingress-cert-"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LETSENCRYPT_ENVIRONMENT}")]),e._v("\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name:         ingress-cert-production\nNamespace:    cert-manager\nLabels:       certmanager.k8s.io/certificate-name=ingress-cert-production\nAnnotations:  certmanager.k8s.io/alt-names: *.mylabs.dev\n              certmanager.k8s.io/common-name: *.mylabs.dev\n              certmanager.k8s.io/ip-sans:\n              certmanager.k8s.io/issuer-kind: ClusterIssuer\n              certmanager.k8s.io/issuer-name: letsencrypt-production-dns\n              kubed.appscode.com/sync: app=kubed\n\nType:  kubernetes.io/tls\n\nData\n====\nca.crt:   0 bytes\ntls.crt:  3550 bytes\ntls.key:  1675 bytes\n")])])]),a("p",[e._v("Check the SSL certificate:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" openssl s_client "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-showcerts")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-connect")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MY_DOMAIN}")]),e._v(":443 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&>")]),e._v(" /dev/null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('". "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" openssl s_client "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-showcerts")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-connect")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MY_DOMAIN}")]),e._v(":443 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" openssl x509 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-inform")]),e._v(" pem "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-noout")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-text")]),e._v("\n")])])]),a("p",[e._v("Output:")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[e._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("depth=2 O = Digital Signature Trust Co., CN = DST Root CA X3\nverify return:1\ndepth=1 C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\nverify return:1\ndepth=0 CN = *.mylabs.dev\nverify return:1\nDONE\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            03:cf:14:18:90:0e:c8:7f:c2:39:eb:e5:dc:42:d7:c6:7a:a6\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\n        Validity\n            Not Before: Jul 19 08:49:53 2019 GMT\n            Not After : Oct 17 08:49:53 2019 GMT\n        Subject: CN = *.mylabs.dev\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (2048 bit)\n                Modulus:\n...\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n                44:C9:D2:B1:71:D6:94:92:67:DB:8C:C9:7E:0C:68:10:C3:10:41:D9\n            X509v3 Authority Key Identifier:\n                keyid:A8:4A:6A:63:04:7D:DD:BA:E6:D1:39:B7:A6:45:65:EF:F3:A8:EC:A1\n\n            Authority Information Access:\n                OCSP - URI:http://ocsp.int-x3.letsencrypt.org\n                CA Issuers - URI:http://cert.int-x3.letsencrypt.org/\n\n            X509v3 Subject Alternative Name:\n                DNS:*.mylabs.dev\n            X509v3 Certificate Policies:\n                Policy: 2.23.140.1.2.1\n                Policy: 1.3.6.1.4.1.44947.1.1.1\n                  CPS: http://cps.letsencrypt.org\n...\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);